
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Environment variables missing');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testCompleteMultiTenancyFixed() {
  try {
    console.log('üß™ TESTE COMPLETO DE MULTI-TENANCY - VERS√ÉO CORRIGIDA\n');
    console.log('Testando cria√ß√£o de dados isolados por empresa...\n');

    // 1. Obter todas as empresas existentes
    console.log('üè¢ Buscando empresas existentes...');
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, name')
      .order('id');

    if (companiesError) {
      console.error('‚ùå Erro ao buscar empresas:', companiesError);
      return;
    }

    console.log(`‚úÖ ${companies.length} empresas encontradas:`);
    companies.forEach(company => {
      console.log(`  ‚Ä¢ ${company.name} (ID: ${company.id})`);
    });

    // 2. Para cada empresa, criar dados de teste com melhor tratamento de erros
    const testResults = [];

    for (const company of companies.slice(0, 5)) { // Limitar a 5 empresas para teste
      console.log(`\nüîß Testando empresa: ${company.name} (ID: ${company.id})`);
      
      const companyResult = {
        company: company,
        user: null,
        category: null,
        supplier: null,
        product: null,
        checklist: null,
        errors: []
      };

      try {
        // 2.1. Criar usu√°rio para a empresa (com verifica√ß√£o de duplicatas)
        console.log('  üë§ Criando usu√°rio...');
        const userEmail = `teste${company.id}@${company.name.toLowerCase().replace(/[^a-z0-9]/g, '')}.com`;
        const supabaseUserId = `test-user-${company.id}-${Date.now()}`;
        
        // Verificar se usu√°rio j√° existe
        const { data: existingUser } = await supabase
          .from('users')
          .select('id, name')
          .eq('email', userEmail)
          .single();

        if (existingUser) {
          console.log(`    ‚ö†Ô∏è  Usu√°rio j√° existe: ${existingUser.name}`);
          companyResult.user = existingUser;
        } else {
          const { data: user, error: userError } = await supabase
            .from('users')
            .insert({
              name: `Usu√°rio Teste ${company.id}`,
              email: userEmail,
              company_id: company.id,
              role: 'funcionario',
              supabase_user_id: supabaseUserId,
              is_active: true
            })
            .select()
            .single();

          if (userError) {
            console.log(`    ‚ùå Erro ao criar usu√°rio: ${userError.message}`);
            companyResult.errors.push(`User: ${userError.message}`);
          } else {
            console.log(`    ‚úÖ Usu√°rio criado: ${user.name}`);
            companyResult.user = user;
          }
        }

        // 2.2. Criar categoria para a empresa (com verifica√ß√£o de duplicatas)
        console.log('  üìÇ Criando categoria...');
        const categoryName = `Categoria Teste ${company.id}`;
        
        const { data: existingCategory } = await supabase
          .from('categories')
          .select('id, name')
          .eq('name', categoryName)
          .eq('company_id', company.id)
          .single();

        if (existingCategory) {
          console.log(`    ‚ö†Ô∏è  Categoria j√° existe: ${existingCategory.name}`);
          companyResult.category = existingCategory;
        } else {
          const { data: category, error: categoryError } = await supabase
            .from('categories')
            .insert({
              name: categoryName,
              description: `Categoria de teste para ${company.name}`,
              company_id: company.id
            })
            .select()
            .single();

          if (categoryError) {
            console.log(`    ‚ùå Erro ao criar categoria: ${categoryError.message}`);
            companyResult.errors.push(`Category: ${categoryError.message}`);
          } else {
            console.log(`    ‚úÖ Categoria criada: ${category.name}`);
            companyResult.category = category;
          }
        }

        // 2.3. Criar fornecedor para a empresa (com verifica√ß√£o de duplicatas)
        console.log('  üè™ Criando fornecedor...');
        const supplierName = `Fornecedor Teste ${company.id}`;
        
        const { data: existingSupplier } = await supabase
          .from('suppliers')
          .select('id, name')
          .eq('name', supplierName)
          .eq('company_id', company.id)
          .single();

        if (existingSupplier) {
          console.log(`    ‚ö†Ô∏è  Fornecedor j√° existe: ${existingSupplier.name}`);
          companyResult.supplier = existingSupplier;
        } else {
          const { data: supplier, error: supplierError } = await supabase
            .from('suppliers')
            .insert({
              name: supplierName,
              email: `fornecedor${company.id}@teste.com`,
              phone: `(11) 9999-${company.id.toString().padStart(4, '0')}`,
              company_id: company.id
            })
            .select()
            .single();

          if (supplierError) {
            console.log(`    ‚ùå Erro ao criar fornecedor: ${supplierError.message}`);
            companyResult.errors.push(`Supplier: ${supplierError.message}`);
          } else {
            console.log(`    ‚úÖ Fornecedor criado: ${supplier.name}`);
            companyResult.supplier = supplier;
          }
        }

        // 2.4. Criar produto para a empresa (apenas se categoria e fornecedor existirem)
        if ((companyResult.category || existingCategory) && (companyResult.supplier || existingSupplier)) {
          console.log('  üì¶ Criando produto...');
          const productName = `Produto Teste ${company.id}`;
          const category = companyResult.category || existingCategory;
          const supplier = companyResult.supplier || existingSupplier;
          
          const { data: existingProduct } = await supabase
            .from('products')
            .select('id, name')
            .eq('name', productName)
            .eq('company_id', company.id)
            .single();

          if (existingProduct) {
            console.log(`    ‚ö†Ô∏è  Produto j√° existe: ${existingProduct.name}`);
            companyResult.product = existingProduct;
          } else {
            const { data: product, error: productError } = await supabase
              .from('products')
              .insert({
                name: productName,
                description: `Produto de teste para ${company.name}`,
                unit: 'unidade',
                current_stock: 10,
                min_stock: 2,
                cost_price: 19.90,
                category_id: category.id,
                supplier_id: supplier.id,
                company_id: company.id
              })
              .select()
              .single();

            if (productError) {
              console.log(`    ‚ùå Erro ao criar produto: ${productError.message}`);
              companyResult.errors.push(`Product: ${productError.message}`);
            } else {
              console.log(`    ‚úÖ Produto criado: ${product.name}`);
              companyResult.product = product;
            }
          }
        } else {
          console.log('    ‚ö†Ô∏è  Pulando cria√ß√£o de produto (falta categoria ou fornecedor)');
        }

        // 2.5. Criar checklist template e item
        console.log('  üìã Criando template de checklist...');
        const templateName = `Checklist Teste ${company.id}`;
        
        const { data: existingTemplate } = await supabase
          .from('checklist_templates')
          .select('id, name')
          .eq('name', templateName)
          .eq('company_id', company.id)
          .single();

        if (existingTemplate) {
          console.log(`    ‚ö†Ô∏è  Template j√° existe: ${existingTemplate.name}`);
          companyResult.checklist = existingTemplate;
        } else {
          const { data: template, error: templateError } = await supabase
            .from('checklist_templates')
            .insert({
              name: templateName,
              type: 'limpeza',
              company_id: company.id
            })
            .select()
            .single();

          if (templateError) {
            console.log(`    ‚ùå Erro ao criar template: ${templateError.message}`);
            companyResult.errors.push(`Template: ${templateError.message}`);
          } else {
            console.log(`    ‚úÖ Template criado: ${template.name}`);
            companyResult.checklist = template;

            // Criar item para o template
            const { data: item, error: itemError } = await supabase
              .from('checklist_items')
              .insert({
                template_id: template.id,
                title: `Item Teste ${company.id}`,
                description: `Item de checklist para ${company.name}`,
                category: 'Teste',
                order: 1
              })
              .select()
              .single();

            if (itemError) {
              console.log(`    ‚ö†Ô∏è  Erro ao criar item: ${itemError.message}`);
            } else {
              console.log(`    ‚úÖ Item de checklist criado: ${item.title}`);
            }
          }
        }

      } catch (error) {
        console.log(`    üí• Erro inesperado: ${error.message}`);
        companyResult.errors.push(`Unexpected: ${error.message}`);
      }

      testResults.push(companyResult);
    }

    // 3. Verificar isolamento de dados
    console.log('\nüîç VERIFICANDO ISOLAMENTO DE DADOS...\n');

    for (const result of testResults) {
      const company = result.company;
      console.log(`üè¢ Verificando isolamento para: ${company.name} (ID: ${company.id})`);

      try {
        // Contar dados por empresa
        const { count: userCount } = await supabase
          .from('users')
          .select('id', { count: 'exact' })
          .eq('company_id', company.id);

        const { count: categoryCount } = await supabase
          .from('categories')
          .select('id', { count: 'exact' })
          .eq('company_id', company.id);

        const { count: productCount } = await supabase
          .from('products')
          .select('id', { count: 'exact' })
          .eq('company_id', company.id);

        const { count: supplierCount } = await supabase
          .from('suppliers')
          .select('id', { count: 'exact' })
          .eq('company_id', company.id);

        const { count: templateCount } = await supabase
          .from('checklist_templates')
          .select('id', { count: 'exact' })
          .eq('company_id', company.id);

        console.log(`  üë• Usu√°rios: ${userCount || 0}`);
        console.log(`  üìÇ Categorias: ${categoryCount || 0}`);
        console.log(`  üè™ Fornecedores: ${supplierCount || 0}`);
        console.log(`  üì¶ Produtos: ${productCount || 0}`);
        console.log(`  üìã Templates: ${templateCount || 0}`);

      } catch (error) {
        console.log(`  ‚ùå Erro ao verificar dados: ${error.message}`);
      }
    }

    // 4. Resumo final melhorado
    console.log('\nüìä RESUMO DO TESTE COMPLETO:\n');

    let totalSuccess = 0;
    let totalErrors = 0;
    let totalItems = 0;

    testResults.forEach(result => {
      const items = [result.user, result.category, result.supplier, result.product, result.checklist];
      const successCount = items.filter(Boolean).length;
      const errorCount = result.errors.length;
      
      totalSuccess += successCount;
      totalErrors += errorCount;
      totalItems += 5; // 5 tipos de itens por empresa

      console.log(`üè¢ ${result.company.name}:`);
      console.log(`  ‚úÖ Criados com sucesso: ${successCount}/5`);
      console.log(`  ‚ùå Erros: ${errorCount}`);
      
      if (errorCount > 0) {
        result.errors.forEach(error => {
          console.log(`    ‚Ä¢ ${error}`);
        });
      }
    });

    const successRate = ((totalSuccess / totalItems) * 100).toFixed(1);

    console.log(`\nüéØ RESULTADO GERAL:`);
    console.log(`‚úÖ Total de itens criados: ${totalSuccess}/${totalItems}`);
    console.log(`üìà Taxa de sucesso: ${successRate}%`);
    console.log(`‚ùå Total de erros: ${totalErrors}`);
    
    if (totalErrors === 0) {
      console.log('üéâ MULTI-TENANCY FUNCIONANDO PERFEITAMENTE!');
      console.log('‚úÖ Isolamento de dados confirmado');
      console.log('‚úÖ Todas as opera√ß√µes CRUD funcionando');
      console.log('‚úÖ Sistema pronto para produ√ß√£o');
    } else if (parseFloat(successRate) >= 80) {
      console.log('üü° MULTI-TENANCY FUNCIONANDO COM PEQUENOS AJUSTES NECESS√ÅRIOS');
      console.log('‚úÖ Isolamento de dados confirmado');
      console.log('‚ö†Ô∏è  Alguns erros pontuais encontrados');
    } else {
      console.log('üî¥ PROBLEMAS SIGNIFICATIVOS ENCONTRADOS');
      console.log('‚ùå Verificar configura√ß√£o de RLS e schemas');
    }

    console.log('\nüí° PR√ìXIMOS PASSOS:');
    if (totalErrors > 0) {
      console.log('1. Verificar pol√≠ticas RLS');
      console.log('2. Verificar constraints de schema');
      console.log('3. Testar com dados limpos');
    } else {
      console.log('1. Sistema aprovado para produ√ß√£o');
      console.log('2. Implementar monitoramento');
      console.log('3. Documentar processos');
    }

  } catch (error) {
    console.error('üí• Erro geral no teste:', error);
  }
}

testCompleteMultiTenancyFixed();
